{"version":3,"sources":["components/search.jsx","components/Books.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","_ref","value","onChange","react_default","a","createElement","className","type","placeholder","e","currentTarget","id","onClick","STRING_MAX_LENGTH","Books","state","books","searchQuery","emptStr","limitLength","str","length","substring","handleSearch","query","_this","setState","apiRequest","axios","request","concat","then","response","data","items","catch","error","console","log","_this2","this","_this$state","Fragment","search","map","book","key","style","width","display","margin","src","volumeInfo","imageLinks","thumbnail","alt","title","authors","publisher","href","infoLink","target","rel","Component","App","components_Books","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d199ec33.chunk.js","sourcesContent":["import React from \"react\";\nconst Search = ({ value, onChange }) => {\n  return (\n    <div className=\"input-group mb-3 my-4 mx-3 col-sm-6 center\">\n      <input\n        type=\"search\"\n        className=\"form-control \"\n        placeholder=\"Search by book title or author...\"\n        value={value}\n        onChange={e => onChange(e.currentTarget.value)}\n      />\n      <div className=\"input-group-append\">\n        <button\n          className=\"btn btn-outline-success\"\n          type=\"search\"\n          id=\"button-addon2\"\n          value={value}\n          onClick={e => onChange(e.currentTarget.value)}\n        >\n          Search\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport Search from \"./search\";\nimport axios from \"axios\";\n\nconst STRING_MAX_LENGTH = 40;\nclass Books extends Component {\n  state = {\n    books: [],\n    searchQuery: \"\",\n    emptStr: \"\"\n  };\n  limitLength = str => {\n    if (!str) return str;\n    if (str.length > STRING_MAX_LENGTH + 3) {\n      return str.substring(0, STRING_MAX_LENGTH) + \"...\";\n    }\n    return str;\n  };\n\n  handleSearch = query => {\n    if (query !== \"\")\n      this.setState({ searchQuery: query }, this.apiRequest(query));\n    else {\n      this.setState({\n        books: [],\n        emptStr: \"Please enter a search term\",\n        searchQuery: \"\"\n      });\n    }\n  };\n\n  apiRequest = e => {\n    if (this.state.searchQuery !== \"\") {\n      axios\n        .request(\n          `https://www.googleapis.com/books/v1/volumes?q=\n            ${this.state.searchQuery}`\n        )\n        .then(response => {\n          this.setState({ books: response.data.items });\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    } else {\n      this.setState({\n        books: [],\n        searchQuery: \"\"\n      });\n    }\n  };\n\n  render() {\n    const { searchQuery, books } = this.state;\n\n    return (\n      <React.Fragment>\n        <Search value={searchQuery} onChange={this.handleSearch} />\n        {books.map(book => (\n          <div\n            className=\"card mb-3 mx-6\"\n            key={book.id}\n            style={{\n              width: 350 + \"px\",\n              display: \"inline-block\",\n              margin: 10 + \"px\"\n            }}\n          >\n            <div className=\"row no-gutters\">\n              <div className=\"col-md-4\">\n                <img\n                  src={\n                    (book.volumeInfo.imageLinks &&\n                      book.volumeInfo.imageLinks.thumbnail) ||\n                    \"NO IMAGE\"\n                  }\n                  className=\"card-img\"\n                  alt=\"...\"\n                />\n              </div>\n              <div className=\"col-md-8\">\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">\n                    {this.limitLength(book.volumeInfo.title)}\n                  </h5>\n\n                  <p className=\"card-text\">\n                    <small className=\"text-muted\">\n                      By: {book.volumeInfo.authors}\n                    </small>\n                  </p>\n                  <p className=\"card-text\">\n                    <small className=\"text-muted\">\n                      published by: {book.volumeInfo.publisher}\n                    </small>\n                  </p>\n                  <a\n                    href={book.volumeInfo.infoLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"btn btn-success\"\n                  >\n                    See this book\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n\n        <h4 className=\"mx-5 text-muted\">\n          {this.state.searchQuery === \"\" ? this.state.emptStr : \"\"}\n        </h4>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Books;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Books from \"./components/Books\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <p>Google API Book Finder</p>\n          </header>\n        </div>\n        <Books />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}